//
//  AuthScreenViewController.swift
//  HearthstoneLegendaryAPI
//
//  Created by 18579118 on 24.08.2020.
//  Copyright (c) 2020 18579118. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class AuthScreenCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {
    // MARK: - Private properties -
    private enum Constants {
        static let cellIdentifier = "cell"
        static let numberOfSections = 1
        static let paddingSpace: CGFloat = 3
    }
    
    private let sectionInsets = UIEdgeInsets (
        top: 50.0,
        left: 10.0,
        bottom: 50.0,
        right: 10.0
    )
    
    // MARK: - Public properties -
    var presenter: AuthScreenPresenterInterface!
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        collectionView.register(ClassCollectionViewCell.self, forCellWithReuseIdentifier: Constants.cellIdentifier)
        presenter.authAndPrepareToShow()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        collectionView.reloadData()
    }
    
    // Mark: - DataSource -
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter.count
    }
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        return Constants.numberOfSections
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Constants.cellIdentifier, for: indexPath) as?
            ClassCollectionViewCell else { return UICollectionViewCell() }
        presenter.configureCell(index: indexPath.row, cell: cell)
        return cell
    }
    
    // notify presenter that heroClass (by row) was tapped
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter.viewTapped(by: indexPath.row)
    }
    
    // Mark: - Layout -
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        let paddingSpace = sectionInsets.left * Constants.paddingSpace
        let availableWidth = view.frame.width - paddingSpace
        let widthPerItem = availableWidth
        
        return CGSize(width: widthPerItem, height: widthPerItem / 2.0)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        insetForSectionAt section: Int) -> UIEdgeInsets {
        return sectionInsets
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return sectionInsets.top / 2.0
    }
}

// MARK: - Extensions -

extension AuthScreenCollectionViewController: AuthScreenViewInterface {
    func setupView() {
        collectionView.backgroundColor = .black
        setConstraints()
    }
    
    private func setConstraints() {
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor)
        ])
    }
    
    func performAnimation() {
        
    }
}
