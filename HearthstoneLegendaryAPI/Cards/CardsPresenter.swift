//
//  CardsPresenter.swift
//  HearthstoneLegendaryAPI
//
//  Created by 18579118 on 29.07.2020.
//  Copyright (c) 2020 18579118. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import UIKit

final class CardsPresenter {

    // MARK: - Private properties -
    // view
    private unowned let viewCell: CardsCollectionViewCellProtocol
    private unowned let view: CardsCollectionViewProtocol
    
    private let interactor: CardsInteractorProtocol
    private let wireframe: CardsWireframeProtocol
    //private var cells: [UICollectionViewCell] = []
    private var cards: Cards?
    

    // MARK: - Lifecycle -

    init(view: CardsCollectionViewProtocol, interactor: CardsInteractorProtocol, wireframe: CardsWireframeProtocol, viewCell: CardCollectionViewCell) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.viewCell = viewCell
    }
}

// MARK: - Extensions -

extension CardsPresenter: CardsPresenterProtocol {
    func viewTapped(byIndex index: Int) {
        guard let card = cards?.cards?[index] else { return }
        print("OPENED CARD: \(card.image)")
        wireframe.openDetailInfo(card: card)
    }
    
    func url(byIndex index: Int) -> URL? {
        let path = cards?.cards?[index].image ?? ""
        guard let url = URL(string: path) else { return nil }
        return url
    }
    
    
    func cellsCount() -> Int {
        return cards?.cards?.count ?? 1
    }
    
    func configureView() {
        // fetch data
        // let cards  = interactor.fetchData()
        // there should be a spinner
        view.setView()
        view.setConstraints()
        interactor.fetchData() { [weak self] in
            self?.cards = self?.interactor.cards
            print("here is \(self?.cards)")
            // update content
            self?.view.reload()
            // there spinner should be stopped
        }
    }
    
    // sending message to router that this view should be closed
}

extension CardsPresenter: CardPresenterProtocol {
    func loadImage(withIndex index: Int) {
        guard let path = cards?.cards?[index].image else { return }
        let url = URL(fileURLWithPath: path)
        viewCell.cardImage.load(url: url)
    }
}
