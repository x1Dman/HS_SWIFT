//
//  CardsPresenter.swift
//  HearthstoneLegendaryAPI
//
//  Created by 18579118 on 29.07.2020.
//  Copyright (c) 2020 18579118. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import UIKit

final class CardsPresenter {

    // MARK: - Private properties -
    private enum Constants {
        static let defaultPath = ""
        static let defaultCount = 1
    }
    private unowned let viewCell: CardsCollectionViewCellProtocol
    private unowned let view: CardsCollectionViewProtocol
    
    private let interactor: CardsInteractorProtocol
    private let wireframe: CardsWireframeProtocol
    private var cards: Cards?
    private let imageManager = ImageManager()
    

    // MARK: - Lifecycle -

    init(view: CardsCollectionViewProtocol, interactor: CardsInteractorProtocol, wireframe: CardsWireframeProtocol, viewCell: CardCollectionViewCell) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.viewCell = viewCell
    }
}

// MARK: - Extensions -

extension CardsPresenter: CardsPresenterProtocol {
    func configureCell(index: Int, cell: CardCollectionViewCell) {
        guard let path = cards?.cards?[index].image else { return }
        guard let url = URL(string: path) else { return }
        imageManager.loadImage(from: url) { data in
            guard let data = data as? Data else { return }
            guard let image = UIImage(data: data) else {
                return
            }
            cell.cardImage.image = image
        }
    }
    
    func viewTapped(byIndex index: Int) {
        guard let card = cards?.cards?[index] else { return }
        wireframe.openDetailInfo(card: card)
    }
    
    func url(byIndex index: Int) -> URL? {
        let path = cards?.cards?[index].image ?? Constants.defaultPath
        guard let url = URL(string: path) else { return nil }
        return url
    }
    
    
    func cellsCount() -> Int {
        return cards?.cards?.count ?? Constants.defaultCount
    }
    
    func configureView() {
        // there should be a spinner
        view.setView()
        view.setConstraints()
        interactor.fetchData() { [weak self] in
            self?.cards = self?.interactor.cards
            // update content
            self?.view.reload()
            // there spinner should be stopped
        }
    }
}

extension CardsPresenter: CardPresenterProtocol {

}
