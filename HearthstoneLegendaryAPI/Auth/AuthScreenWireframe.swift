//
//  AuthScreenWireframe.swift
//  HearthstoneLegendaryAPI
//
//  Created by 18579118 on 24.08.2020.
//  Copyright (c) 2020 18579118. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class AuthScreenWireframe: BaseWireframe {
    
    // MARK: - Private properties -
    
    // MARK: - Module setup -
    
    init() {
        let moduleViewController = AuthScreenCollectionViewController(collectionViewLayout: UICollectionViewFlowLayout())
        super.init(viewController: moduleViewController)
        
        let interactor = AuthScreenInteractor()
        let presenter = AuthScreenPresenter(view: moduleViewController, interactor: interactor, wireframe: self)
        moduleViewController.presenter = presenter
    }
    
}

// MARK: - Extensions -

extension AuthScreenWireframe: AuthScreenWireframeInterface {
    func startLoading() {
        guard let sceneDelegate = UIApplication.shared.connectedScenes
            .first?.delegate as? SceneDelegate,
            let openedController = sceneDelegate.loadingWindow?.rootViewController as? LoadingViewControllerProtocol else {
                return
        }
        sceneDelegate.openLoadingWindow()
        UIView.animate(withDuration: 1.0, delay: 0, options: [.autoreverse, .repeat], animations: { openedController.start() }) {
           _ in
        }
    }
    
    func stopLoading(with status: AuthStatus) {
        guard let sceneDelegate = UIApplication.shared.connectedScenes
            .first?.delegate as? SceneDelegate,
            let openedController = sceneDelegate.loadingWindow?.rootViewController as? LoadingViewControllerProtocol else {
                return
        }
        
        UIView.animate(withDuration: 3.0, delay: 0.0, animations: {
            switch status {
            case .success:
                openedController.stop()
            default:
                openedController.stopError()
            }
        }) { _ in
            if status == .success {
                sceneDelegate.closeLoadingWindow()
            }
        }
    }
    
    func moveToCards(by className: String) {
        let cardsWireframe = CardsWireframe(with: className)
        navigationController?.pushWireframe(cardsWireframe)
    }
}
