//
//  CardsViewController.swift
//  HearthstoneLegendaryAPI
//
//  Created by 18579118 on 29.07.2020.
//  Copyright (c) 2020 18579118. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class CardsCollectionViewController: UICollectionViewController {
    
    private struct Constants {
        static let cellName = "cell"
    }
    
    // MARK: - Public properties -
    
    var presenter: CardsPresenterProtocol!
    
    // MARK: private properties
    // made for presentation of cells
    private let sectionInsets = UIEdgeInsets(
        top: 50.0,
        left: 20.0,
        bottom: 50.0,
        right: 20.0
    )
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // ask for configuration
        collectionView.register(CardCollectionViewCell.self, forCellWithReuseIdentifier: Constants.cellName)
        presenter.configureView()
    }
    
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter.cellsCount()
    }
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        print(presenter.cellsCount())
        return 1
    }
    
    // MARK: WORK WITH CELL
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Constants.cellName, for: indexPath) as?
            CardCollectionViewCell else { return UICollectionViewCell() }
        presenter.configureCell(index: indexPath.row, cell: cell)
        return cell
    }
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // asking presenter to push the current cell with card description and image
        presenter.viewTapped(byIndex: indexPath.row)
    }
}

// MARK: - Extensions -
extension CardsCollectionViewController: CardsCollectionViewProtocol {
    // reloading cells
    func reload() {
        collectionView.reloadData()
    }
    
    func setView() {
        collectionView.register(CardCollectionViewCell.self, forCellWithReuseIdentifier: Constants.cellName)
        collectionView.backgroundColor = .black
    }
    
    func setConstraints() {
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor)
        ])
    }
}

// MARK: MADE FOR VISUAL BEAUTY OF CELLS
extension CardsCollectionViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        let paddingSpace = sectionInsets.left * (2)
        let availableWidth = view.frame.width - paddingSpace
        let widthPerItem = availableWidth
        
        return CGSize(width: widthPerItem, height: widthPerItem)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        insetForSectionAt section: Int) -> UIEdgeInsets {
        return sectionInsets
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return sectionInsets.left
    }
    
}
